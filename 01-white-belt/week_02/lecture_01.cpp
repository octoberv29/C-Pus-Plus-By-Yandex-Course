#include <iostream>
#include <string>
#include <vector>

using namespace std;

// ---------| Functions |--------- //
// ---------| 1. Передача параметров функции по значению |--------- //
// ---------| 2. Передача параметров функции по ссылке |--------- //
// ---------| 3. Передача параметров функции по константной ссылке |--------- //



 /*

    1. Передача параметров функции по значению -
    в функцию преедаются копии тех значений, которые переданы в нее при вызове

    2. Передача параметров функции по ссылке (&, reference)-
    нам нужно модифицировать объекты, которые мы передали
    + это избавляет нас от копирования, сохраняя время и память

    3. Передача параметров функции по константной ссылке (&, const reference)-
    передача по ссылке когда нам не нужно модифицировать объект,
    но все равно сохранить время и память
    + мы можем принимать вызов из другой функции
    + модификатор типа const защищает от случайных изменений

 */

// 1. Передача параметров функции по значению
void ChangeInt(int x) {
  x = 42;
}

// 2. Передача параметров функции по ссылке
void Swap(int& x, int& y) {
  int temp = x;
  x = y;
  y = temp;
}

void Sort(vector<int>& v) {
  sort(begin(v), end(v));
}

// 3. Передача параметров функции по константной ссылке
void PrintVector(const vector<int>& v) {
  cout << "Sorted: ";
  for (auto x : v) {
    cout << x << " ";
  }
  cout << "\n";
}

int main() {
  // 1. Передача параметров функции по значению
  int x = 5;
  ChangeInt(x);
  cout << x << endl; // выведет 5 (передача параметров по значению)

  // 2. Передача параметров функции по ссылке
  int a = 1;
  int b = 2;
  Swap(a, b);
  cout << "a == " << a << '\n'; // a == 2
  cout << "b == " << b << '\n'; // b == 1

  // 2. Передача параметров функции по ссылке
  vector<int> nums = {3, 6, 1, 2, 0, 2};
  Sort(nums);
  PrintVector(nums);
  // следующее работает только если в PrintVector предаем параметры по константной ссылке
  // PrintVector(Sort(nums));

  return 0;

}
